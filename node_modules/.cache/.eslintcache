[{"C:\\wamp64\\www\\cowmais\\client\\src\\index.js":"1","C:\\wamp64\\www\\cowmais\\client\\src\\App.js":"2","C:\\wamp64\\www\\cowmais\\client\\src\\pages\\LoginPage\\index.jsx":"3","C:\\wamp64\\www\\cowmais\\client\\src\\AppRoutes.jsx":"4","C:\\wamp64\\www\\cowmais\\client\\src\\pages\\HomePage\\index.jsx":"5","C:\\wamp64\\www\\cowmais\\client\\src\\pages\\Register\\index.jsx":"6","C:\\wamp64\\www\\cowmais\\client\\src\\contexts\\AuthContext.js":"7","C:\\wamp64\\www\\cowmais\\client\\src\\utils\\init-firebase.js":"8","C:\\wamp64\\www\\cowmais\\client\\src\\hooks\\useMounted.js":"9","C:\\wamp64\\www\\cowmais\\client\\src\\pages\\SuccessfullyCreated\\index.jsx":"10","C:\\wamp64\\www\\cowmais\\client\\src\\pages\\NotFoundPage\\index.jsx":"11","C:\\wamp64\\www\\cowmais\\client\\src\\pages\\ForgotPassword\\index.jsx":"12","C:\\wamp64\\www\\cowmais\\client\\src\\pages\\ResetPassword\\index.jsx":"13"},{"size":632,"mtime":1645829994533,"results":"14","hashOfConfig":"15"},{"size":291,"mtime":1645486116311,"results":"16","hashOfConfig":"15"},{"size":4775,"mtime":1645641832133,"results":"17","hashOfConfig":"15"},{"size":1648,"mtime":1645640986298,"results":"18","hashOfConfig":"15"},{"size":712,"mtime":1645572126305,"results":"19","hashOfConfig":"15"},{"size":6505,"mtime":1645641853496,"results":"20","hashOfConfig":"15"},{"size":2137,"mtime":1645648096086,"results":"21","hashOfConfig":"15"},{"size":703,"mtime":1645830336846,"results":"22","hashOfConfig":"15"},{"size":295,"mtime":1645595312289,"results":"23","hashOfConfig":"15"},{"size":845,"mtime":1645642624346,"results":"24","hashOfConfig":"15"},{"size":124,"mtime":1645598986755,"results":"25","hashOfConfig":"15"},{"size":2665,"mtime":1645603219324,"results":"26","hashOfConfig":"15"},{"size":3797,"mtime":1645604456788,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bw01fa",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"35"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"35"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"35"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"35"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"35"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"35"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"35"},"C:\\wamp64\\www\\cowmais\\client\\src\\index.js",[],[],"C:\\wamp64\\www\\cowmais\\client\\src\\App.js",["76"],[],"import React from 'react'\nimport { render } from 'react-dom'\nimport AppRoutes from './AppRoutes'\nimport AuthContextProvider from './contexts/AuthContext'\n\n\nconst App = () => {\n  return (\n    <AuthContextProvider>\n      <AppRoutes/>\n    </AuthContextProvider>\n    )\n  }\n\n\nexport default App;\n",["77","78"],"C:\\wamp64\\www\\cowmais\\client\\src\\pages\\LoginPage\\index.jsx",["79","80","81"],[],"import React, { useState, useRef, useEffect } from 'react'\r\nimport { useToast, Stack, Button, Divider, effect } from '@chakra-ui/react'\r\nimport './styles.css'\r\nimport { useNavigate, Link } from 'react-router-dom'\r\nimport { useAuth } from '../../contexts/AuthContext'\r\nimport { BsGoogle } from 'react-icons/bs'\r\nimport { AiOutlineEyeInvisible, AiOutlineEye } from 'react-icons/ai'\r\nimport useMounted  from '../../hooks/useMounted'\r\n\r\n\r\nconst LoginPage = () => {\r\n  const navigate = useNavigate()\r\n  \r\n  const [ showPassword, setShowPassword ] = useState(false)\r\n  const [ email, setEmail ] = useState('')\r\n  const [ password, setPassword ] = useState('')\r\n  const [ isSubmitting, setIsSubmitting ] = useState(false)\r\n  const toast = useToast()\r\n  const { login, signInWithGoogle } = useAuth()\r\n  const mounted = useMounted()\r\n\r\n\r\n  return (\r\n    <div className=\"body\">\r\n      <div className=\"forms\">\r\n        <div className=\"form login\">\r\n          <span className=\"title\">Login</span>\r\n          <form action=\"#\" onSubmit={async e => {\r\n            e.preventDefault()\r\n\r\n            if (!password || !email) {\r\n              toast({\r\n                  description: 'Credenciais Inválidas',\r\n                  status: 'error',\r\n                  duration: 5000,\r\n                  isClosable: true,\r\n              })\r\n          }\r\n          \r\n          setIsSubmitting(true)\r\n          login(email, password)\r\n          .then(response => {\r\n            console.log(response)\r\n            navigate('/dashboard')\r\n          })\r\n          .catch(error => {\r\n              console.log(error.message)\r\n              toast({\r\n                  description: error.message,\r\n                  status: 'error',\r\n                  duration: 5000,\r\n                  isClosable: true,\r\n              })\r\n            })\r\n          .finally(() => mounted.current && setIsSubmitting(false))\r\n\r\n          }}>\r\n\r\n            <div className=\"input-field\">\r\n              <input \r\n              value={email} \r\n              onChange={e => setEmail(e.target.value)}  \r\n              type=\"email\" \r\n              placeholder=\"Insira seu email\" \r\n               required/>\r\n              <i className=\"uil uil-envelope icon\"></i>\r\n            </div>\r\n\r\n            <div className=\"input-field\">\r\n              <input \r\n              type={showPassword ? 'text' : 'password'}\r\n              value={password} \r\n              onChange={e => setPassword(e.target.value)}\r\n              placeholder=\"Insira sua senha\" required/>            \r\n              <i className=\"uil uil-lock icon\"></i>\r\n\r\n              <button type='button' onClick={() => setShowPassword(prevState => !prevState)}>\r\n                {showPassword ? <AiOutlineEye className=\"showHidePw eye\"/> :\r\n                <AiOutlineEyeInvisible className=\"showHidePw eye\"/> }\r\n              </button>\r\n            </div>    \r\n\r\n            <div className=\"toLogin\">\r\n              <div className=\"content\">\r\n                <input \r\n                type=\"checkbox\" \r\n                id=\"logCheck\"/>\r\n                <label htmlFor=\"logCheck\" className=\"text\">Lembrar de mim</label>\r\n              </div>\r\n              <Link to={'/esqueci-minha-senha'}>\r\n              <label htmlFor=\"\" className=\"forgot text\">Esqueceu sua senha?</label>\r\n              </Link>\r\n            </div>\r\n\r\n            <div className=\"notAccount\">\r\n              <label className=\"not\">Ainda não possui uma conta? </label>\r\n              <Link to={'/criar-conta'}><label className=\"not create\">Crie sua conta</label></Link>\r\n            </div>\r\n            \r\n\r\n\r\n            {/* <div className=\"input-field button\">\r\n              <input type=\"button\" value=\"Login\"/>\r\n              </div> */}\r\n\r\n            <Stack marginTop='5'>\r\n              <Button type=\"submit\" \r\n              isLoading={isSubmitting}\r\n              isFullWidth\r\n              bg='#72C14D'\r\n              color='white'\r\n              _hover={{ bg: '#5da73b' }}\r\n              size=\"lg\" \r\n              fontSize='md'>Login</Button>\"\r\n            </Stack>\r\n          </form>\r\n\r\n          <div className=\"divider\">\r\n            <Divider width={210}/>     \r\n            <h4>OU</h4> \r\n            <Divider width={210}/>\r\n          </div>\r\n          \r\n          <Stack>\r\n          <Button\r\n            size=\"lg\"\r\n            fontSize='md'\r\n            isFullWidth\r\n            leftIcon={<BsGoogle/>}\r\n            colorScheme='red'\r\n            onClick={() => signInWithGoogle().then(user => {\r\n              console.log(user)\r\n              navigate('/dashboard')\r\n            }).catch(error => console.log(error))}\r\n          >\r\n            Fazer Login com o Google\r\n            </Button>\r\n          </Stack>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoginPage","C:\\wamp64\\www\\cowmais\\client\\src\\AppRoutes.jsx",["82"],[],"import React, {useContext} from 'react'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Route,\r\n    Routes,\r\n    Navigate\r\n} from 'react-router-dom'\r\n\r\nimport LoginPage from './pages/LoginPage'\r\nimport SignIn from './pages/Register'\r\nimport HomePage from './pages/HomePage'\r\nimport Success from './pages/SuccessfullyCreated'\r\nimport NotFound from './pages/NotFoundPage'\r\nimport ForgotPassword from './pages/ForgotPassword'\r\nimport ResetPassword from './pages/ResetPassword'\r\n\r\nimport AuthContextProvider from './contexts/AuthContext'\r\nimport { useAuth } from './contexts/AuthContext'\r\n\r\n\r\nconst AppRoutes = () => {\r\n    const Private = ({children}) => {\r\n        const { currentUser } = useAuth()\r\n\r\n        if (!currentUser) {\r\n            return <Navigate to='/login'/>\r\n        }\r\n        return children\r\n    }\r\n    return (  \r\n        <Router>\r\n            <AuthContextProvider>\r\n                <Routes>\r\n                    <Route exact path='/login' element={<LoginPage/>}/>\r\n                    <Route exact path='/criar-conta' element={<SignIn/>}/>\r\n                    <Route exact path='/dashboard' element={<Private><HomePage/></Private>}/>             \r\n                    <Route exact path='*' element={<NotFound/>}/>\r\n                    <Route exact path='/esqueci-minha-senha' element={<ForgotPassword/>}/>\r\n                    <Route exact path='/alterar-senha' element={<ResetPassword/>}/>\r\n                    <Route exact path='/success' element={<Success/>}/>\r\n                                \r\n                </Routes>  \r\n            </AuthContextProvider>\r\n        </Router>      \r\n    )\r\n}\r\n\r\nexport default AppRoutes\r\n\r\n\r\n","C:\\wamp64\\www\\cowmais\\client\\src\\pages\\HomePage\\index.jsx",[],[],"C:\\wamp64\\www\\cowmais\\client\\src\\pages\\Register\\index.jsx",["83","84","85"],[],"import React, { useState, useRef } from 'react'\r\nimport './styles.css'\r\nimport { Button, useToast, Stack, Divider } from '@chakra-ui/react'\r\nimport { useNavigate, Link } from 'react-router-dom'\r\nimport { useAuth } from '../../contexts/AuthContext'\r\nimport { BsGoogle } from 'react-icons/bs'\r\nimport { AiOutlineEyeInvisible, AiOutlineEye } from 'react-icons/ai'\r\nimport useMounted  from '../../hooks/useMounted'\r\n\r\nconst Register = () => {\r\n    const navigate = useNavigate()\r\n\r\n    const passwordRef = useRef()\r\n    const confirmPasswordRef = useRef()\r\n\r\n    const [ showPassword, setShowPassword ] = useState(false)\r\n    const [ showPasswordConfirm, setShowPasswordConfirm ] = useState(false)\r\n\r\n    const [ isError, setIsError ] = useState('')\r\n\r\n    const [ name, setName ] = useState('')\r\n    const [ email, setEmail ] = useState('')\r\n    const [ password, setPassword ] = useState('')\r\n    const [ confirmPassword, setConfirmPassword ] = useState('')\r\n    const [ isSubmitting, setIsSubmitting ] = useState(false)\r\n    const toast = useToast()\r\n    \r\n    const { register } = useAuth()\r\n\r\n    const mounted = useMounted()\r\n\r\n    \r\n  return (\r\n        <div className=\"body\">\r\n            <div className=\"forms\">\r\n                <div className=\"form login\">\r\n                    <span className=\"title\">Crie sua conta</span>\r\n                    <form action=\"#\" onSubmit={async e => {\r\n                        e.preventDefault()\r\n                        \r\n                         if (!password || !email) {\r\n                            toast({\r\n                                description: 'Credenciais Inválidas',\r\n                                status: 'error',\r\n                                duration: 5000,\r\n                                isClosable: true,\r\n                            })\r\n                        }\r\n\r\n                        if (passwordRef.current.value !== confirmPasswordRef.current.value) {\r\n                            toast({\r\n                                description: 'As senhas não coincidem',\r\n                                status: 'error',\r\n                                duration: 3000,\r\n                                isClosable: true,\r\n                            })\r\n                            return (\r\n                                setIsError('As senhas não coincidem')\r\n                            )\r\n                        }\r\n\r\n\r\n                        setIsSubmitting(true)\r\n                        register(email, password)\r\n                        .then(response => {\r\n                            console.log(response)\r\n                            navigate('/success')\r\n                        })\r\n                        .catch(error => {\r\n                            console.log(error.message)\r\n                            toast({\r\n                                description: error.message,\r\n                                status: 'error',\r\n                                duration: 5000,\r\n                                isClosable: true,\r\n                            })})\r\n                        .finally(() => mounted.current && setIsSubmitting(false))\r\n\r\n                        }}>\r\n                        <div className=\"input-field\">\r\n                            <input value={name} onChange={e => setName(e.target.value)} type=\"text\" placeholder=\"Insira seu nome completo\" required/>\r\n                            <i className=\"uil uil-user icon\"></i>\r\n                        </div>\r\n\r\n                        <div className=\"input-field\">\r\n                            <input value={email} \r\n                            onChange={e => setEmail(e.target.value)} \r\n                            type=\"email\" placeholder=\"Insira seu email\" \r\n                            autoComplete='email' \r\n                            required/>\r\n                            <i className=\"uil uil-envelope icon\"></i>\r\n                        </div>\r\n\r\n                        <div className=\"input-field\">\r\n                            <input value={password} \r\n                            onChange={e => setPassword(e.target.value)} \r\n                            ref={passwordRef}\r\n                            type={showPassword ? 'text' : 'password'}\r\n                            placeholder=\"Insira sua senha\" \r\n                            required/>\r\n                            <i className=\"uil uil-lock icon\"></i>\r\n                            <button type='button' onClick={() => setShowPassword(prevState => !prevState)}>\r\n                                {showPassword ? <AiOutlineEye className=\"showHidePw eye\"/> :\r\n                                <AiOutlineEyeInvisible className=\"showHidePw eye\"/>}\r\n                            </button>\r\n                        </div>    \r\n\r\n                        <div className=\"input-field\">\r\n                            <input value={confirmPassword} \r\n                            ref={confirmPasswordRef}\r\n                            onChange={(e) => setConfirmPassword(e.target.value)} \r\n                            type={showPasswordConfirm ? 'text' : 'password'} \r\n                            placeholder=\"Confirme sua senha\" required/>\r\n                            <i className=\"uil uil-lock icon\"></i>\r\n                            <button type='button' onClick={() => setShowPasswordConfirm(prevState => !prevState)}>\r\n                                {showPasswordConfirm ? <AiOutlineEye className=\"showHidePw eye\"/> :\r\n                                <AiOutlineEyeInvisible className=\"showHidePw eye\"/>}\r\n                            </button>\r\n                        </div>\r\n                        \r\n\r\n                        <div className=\"toLogin\">\r\n                            <label className=\"login\">Já possui uma conta? <Link to={'/login'}> <label className=\"login loginText\">Log In</label></Link></label>\r\n                        </div>\r\n\r\n                        <Stack alignn='center' marginTop='5'>\r\n                            <Button type=\"submit\" \r\n                            isLoading={isSubmitting} \r\n                            bg='#72C14D'\r\n                            color='white'\r\n                            _hover={{ bg: '#5da73b'}}\r\n                            size=\"lg\" \r\n                            fontSize='md'\r\n                            \r\n                            >Criar Conta</Button>\r\n                        </Stack>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Register","C:\\wamp64\\www\\cowmais\\client\\src\\contexts\\AuthContext.js",["86","87","88","89"],[],"import { createContext, useContext, useEffect, useState} from 'react'\r\nimport { auth } from '../utils/init-firebase'\r\nimport { createUserWithEmailAndPassword, \r\n        signInWithEmailAndPassword, \r\n        onAuthStateChanged,\r\n        signOut,\r\n        GoogleAuthProvider,\r\n        signInWithPopup,\r\n        sendPasswordResetEmail,\r\n        confirmPasswordReset,\r\n        setPersistence,\r\n        signInWithRedirect,\r\n        inMemoryPersistence,\r\n        sendEmailVerification\r\n} from 'firebase/auth'\r\n\r\nconst AuthContext = createContext({\r\n    currentUser: null,\r\n    register: () => Promise,\r\n    login: () => Promise,\r\n    logout: () => Promise,\r\n    signInWithGoogle: () => Promise,\r\n    forgotPassword: () => Promise,\r\n    resetPassword: () => Promise,\r\n})\r\n\r\nexport const useAuth = () => useContext(AuthContext)\r\n\r\nexport default function AuthContextProvider({ children }) {\r\n    \r\n    const [ currentUser, setCurrentUser ] = useState(null)\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = onAuthStateChanged(auth, user => {\r\n            setCurrentUser(user)\r\n        })\r\n        return () => {\r\n            unsubscribe()\r\n        }\r\n    }, [])\r\n\r\n    function register(email, password) {\r\n        return createUserWithEmailAndPassword(auth, email, password)\r\n    }\r\n\r\n    function login(email, password) {\r\n        return signInWithEmailAndPassword(auth, email, password)\r\n    }\r\n\r\n    function signInWithGoogle() {\r\n        const provider = new GoogleAuthProvider()\r\n        return signInWithPopup(auth, provider)\r\n    }\r\n\r\n    function resetPassword(oobCode, newPassword) {\r\n        return confirmPasswordReset(auth, oobCode, newPassword)\r\n    } \r\n\r\n    function logout() {\r\n        return signOut(auth)\r\n    }\r\n\r\n    function forgotPassword(email) {\r\n        return sendPasswordResetEmail(auth, email, {url: 'https://gestbov.herokuapp.com/login'})\r\n    }\r\n\r\n    const value = {\r\n        currentUser,\r\n        register,\r\n        login,\r\n        logout,\r\n        signInWithGoogle,\r\n        forgotPassword,\r\n        resetPassword\r\n    }\r\n\r\n    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\r\n}","C:\\wamp64\\www\\cowmais\\client\\src\\utils\\init-firebase.js",["90"],[],"C:\\wamp64\\www\\cowmais\\client\\src\\hooks\\useMounted.js",["91"],[],"import React, { useRef, useEffect } from 'react'\r\n\r\nexport default function useMounted() {\r\n\r\n    const mounted = useRef(false)\r\n\r\n    useEffect(() => {\r\n        mounted.current = true\r\n        return () => {\r\n          mounted.current = false\r\n        }\r\n        }, [])\r\n\r\n  return mounted\r\n}\r\n","C:\\wamp64\\www\\cowmais\\client\\src\\pages\\SuccessfullyCreated\\index.jsx",["92","93","94"],[],"import React from 'react'\r\nimport './styles.css'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { Button, useToast, Stack, Divider } from '@chakra-ui/react'\r\nimport Cow from '../../icons/cow.svg'\r\n\r\nconst Sucess = () => {\r\n  const navigate = useNavigate()\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"square\">\r\n        <div className=\"components\">\r\n          <span className=\"title\">Sua conta foi criada com sucesso</span>\r\n          <Button className=\"button\"\r\n          bg='#72C14D'\r\n          color='white'\r\n          _hover={{ bg: '#5da73b'}}\r\n          size=\"lg\" \r\n          fontSize='md'\r\n          onClick={() => navigate('/login')}>Ir para tela de Login\r\n          </Button>\r\n        </div>\r\n        <img src={Cow} alt=\"cow\" className=\"cow\"/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Sucess","C:\\wamp64\\www\\cowmais\\client\\src\\pages\\NotFoundPage\\index.jsx",[],[],"C:\\wamp64\\www\\cowmais\\client\\src\\pages\\ForgotPassword\\index.jsx",[],[],"C:\\wamp64\\www\\cowmais\\client\\src\\pages\\ResetPassword\\index.jsx",["95","96"],[],"import React, { useState, useRef} from 'react'\r\n\r\nimport { useLocation, useNavigate } from 'react-router-dom'\r\nimport { useToast, Stack, Button, Divider } from '@chakra-ui/react'\r\nimport { useAuth } from '../../contexts/AuthContext'\r\n\r\nfunction useQuery() {\r\n    const location = useLocation()\r\n    return new URLSearchParams(location.search)\r\n}\r\n\r\n\r\nconst ResetPassword = () => {\r\n    const navigate = useNavigate()\r\n    const toast = useToast()\r\n\r\n    const newPasswordRef = useRef()\r\n    const newConfirmPasswordRef = useRef()\r\n    const [isError, setIsError ] = useState('')\r\n\r\n\r\n    const { resetPassword } = useAuth()\r\n    const query = useQuery()\r\n    console.log(query.get('mode'))\r\n    console.log(query.get('oobCode'))\r\n    console.log(query.get('continueUrl'))\r\n\r\n    const [newPassword, setNewPassword] = useState('')\r\n    const [newPasswordConfirm, setNewPasswordConfirm] = useState('')\r\n\r\n  return (\r\n    <div className=\"body\">\r\n      <div className=\"forms\">\r\n        <div className=\"form login\">\r\n          <span className=\"title\">Alterar senha</span>\r\n          <form action=\"#\" onSubmit={async e => {\r\n              e.preventDefault()\r\n            \r\n              if (newPasswordRef.current.value !== newConfirmPasswordRef.current.value) {\r\n                toast({\r\n                    description: 'As senhas não coincidem',\r\n                    status: 'error',\r\n                    duration: 3000,\r\n                    isClosable: true,\r\n                })\r\n                return (\r\n                    setIsError('As senhas não coincidem')\r\n                )\r\n            }\r\n\r\n            resetPassword(query.get('oobCode'), newPassword)\r\n            .then(res => {\r\n                console.log(res)\r\n                toast({\r\n                    description: 'Senha alterada com sucesso',\r\n                    status: 'success',\r\n                    duration: 3000,\r\n                    isClosable: true,\r\n                })\r\n                navigate('/login')\r\n            })\r\n            .catch(err => {\r\n                console.log(err.message)\r\n                toast({\r\n                    description: err.message,\r\n                    status: 'error',\r\n                    duration: 3000,\r\n                    isClosable: true,\r\n                })\r\n            })\r\n             \r\n          }}>\r\n\r\n            <div className=\"input-field\">\r\n              <input  \r\n              type=\"password\" \r\n              value={newPassword}\r\n              ref={newPasswordRef}\r\n              onChange={e => setNewPassword(e.target.value)}\r\n              placeholder=\"Insira sua nova senha\" \r\n               required/>\r\n              <i className=\"uil uil-lock icon\"></i>\r\n              <i className=\"uil uil-eye-slash showHidePw\"></i>\r\n            </div> \r\n\r\n            <div className=\"input-field\">\r\n              <input  \r\n              value={newPasswordConfirm}\r\n              ref={newConfirmPasswordRef}\r\n              onChange={e => setNewPasswordConfirm(e.target.value)}\r\n              type=\"password\" \r\n              placeholder=\"Confirme a nova senha\" \r\n               required/>\r\n              <i className=\"uil uil-lock icon\"></i>\r\n              <i className=\"uil uil-eye-slash showHidePw\"></i>\r\n            </div> \r\n\r\n\r\n            {/* <div className=\"input-field button\">\r\n              <input type=\"button\" value=\"Login\"/>\r\n              </div> */}\r\n\r\n            <Stack marginTop='34'>\r\n              <Button type=\"submit\" \r\n              \r\n              isFullWidth\r\n              bg='#72C14D'\r\n              color='white'\r\n              _hover={{ bg: '#5da73b' }}\r\n              size=\"lg\" \r\n              fontSize='md'>Enviar</Button>\"\r\n            </Stack>\r\n          </form>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ResetPassword",{"ruleId":"97","severity":1,"message":"98","line":2,"column":10,"nodeType":"99","messageId":"100","endLine":2,"endColumn":16},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"97","severity":1,"message":"105","line":1,"column":27,"nodeType":"99","messageId":"100","endLine":1,"endColumn":33},{"ruleId":"97","severity":1,"message":"106","line":1,"column":35,"nodeType":"99","messageId":"100","endLine":1,"endColumn":44},{"ruleId":"97","severity":1,"message":"107","line":2,"column":44,"nodeType":"99","messageId":"100","endLine":2,"endColumn":50},{"ruleId":"97","severity":1,"message":"108","line":1,"column":16,"nodeType":"99","messageId":"100","endLine":1,"endColumn":26},{"ruleId":"97","severity":1,"message":"109","line":3,"column":35,"nodeType":"99","messageId":"100","endLine":3,"endColumn":42},{"ruleId":"97","severity":1,"message":"110","line":6,"column":10,"nodeType":"99","messageId":"100","endLine":6,"endColumn":18},{"ruleId":"97","severity":1,"message":"111","line":19,"column":13,"nodeType":"99","messageId":"100","endLine":19,"endColumn":20},{"ruleId":"97","severity":1,"message":"112","line":11,"column":9,"nodeType":"99","messageId":"100","endLine":11,"endColumn":23},{"ruleId":"97","severity":1,"message":"113","line":12,"column":9,"nodeType":"99","messageId":"100","endLine":12,"endColumn":27},{"ruleId":"97","severity":1,"message":"114","line":13,"column":9,"nodeType":"99","messageId":"100","endLine":13,"endColumn":28},{"ruleId":"97","severity":1,"message":"115","line":14,"column":9,"nodeType":"99","messageId":"100","endLine":14,"endColumn":30},{"ruleId":"97","severity":1,"message":"116","line":18,"column":7,"nodeType":"99","messageId":"100","endLine":18,"endColumn":16},{"ruleId":"97","severity":1,"message":"117","line":1,"column":8,"nodeType":"99","messageId":"100","endLine":1,"endColumn":13},{"ruleId":"97","severity":1,"message":"118","line":4,"column":18,"nodeType":"99","messageId":"100","endLine":4,"endColumn":26},{"ruleId":"97","severity":1,"message":"119","line":4,"column":28,"nodeType":"99","messageId":"100","endLine":4,"endColumn":33},{"ruleId":"97","severity":1,"message":"109","line":4,"column":35,"nodeType":"99","messageId":"100","endLine":4,"endColumn":42},{"ruleId":"97","severity":1,"message":"109","line":4,"column":35,"nodeType":"99","messageId":"100","endLine":4,"endColumn":42},{"ruleId":"97","severity":1,"message":"111","line":19,"column":12,"nodeType":"99","messageId":"100","endLine":19,"endColumn":19},"no-unused-vars","'render' is defined but never used.","Identifier","unusedVar","no-native-reassign",["120"],"no-negated-in-lhs",["121"],"'useRef' is defined but never used.","'useEffect' is defined but never used.","'effect' is defined but never used.","'useContext' is defined but never used.","'Divider' is defined but never used.","'BsGoogle' is defined but never used.","'isError' is assigned a value but never used.","'setPersistence' is defined but never used.","'signInWithRedirect' is defined but never used.","'inMemoryPersistence' is defined but never used.","'sendEmailVerification' is defined but never used.","'analytics' is assigned a value but never used.","'React' is defined but never used.","'useToast' is defined but never used.","'Stack' is defined but never used.","no-global-assign","no-unsafe-negation"]